//#include <iostream>
//
//using namespace std;
//
//int main()
//{
//	// 如果变量a被修饰为常量，使用指针去接收常量就要使用  常量指针
//	const int a = 100;
//	const int * p = &a;
//	*p = 1000;
//	cout << a << " " << *p << endl;
//	// 此时指针p还可以指向其他内存空间
//	int b = 200;
//	p = &b;
//	cout << *p << endl;
//
//	// 定义一个指针常量（指针的指向不能改变）
//	int * const r = &b;
//	cout << *r << endl;
//	// 这是若想改变指针的指向会报错
//	int c = 300;
//	r = &c;
//
//	// const既修饰指针，又修饰常量
//	const int * const s = &a;
//	s = &b;
//	*s = 2000;
//
//	//3.再把表达式中其它所有const去掉
//	//	2.想看类型声明中某个const的修饰范围，先把基础类型去掉（比如int）
//	//	1.const修饰规律：修饰的是什么，什么不能（通过此变量）改变
//	//	6.以上方法对于以后各位在C++中遇到的更长难的类型声明都能用，
//	//	比如多级指针嵌套数组之类的，都能用！
//	return 0;
//}